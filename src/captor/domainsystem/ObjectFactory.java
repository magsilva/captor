//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.11.22 at 02:36:31 GMT-03:00 
//


package captor.domainsystem;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the captor.domainsystem package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends captor.domainsystem.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(16, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static captor.domainsystem.impl.runtime.GrammarInfo grammarInfo = new captor.domainsystem.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (captor.domainsystem.ObjectFactory.class));
    public final static java.lang.Class version = (captor.domainsystem.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((captor.domainsystem.FormComponentsType.class), "captor.domainsystem.impl.FormComponentsTypeImpl");
        defaultImplementations.put((captor.domainsystem.FormComponentType.class), "captor.domainsystem.impl.FormComponentTypeImpl");
        defaultImplementations.put((captor.domainsystem.NextFormType.class), "captor.domainsystem.impl.NextFormTypeImpl");
        defaultImplementations.put((captor.domainsystem.FormType.class), "captor.domainsystem.impl.FormTypeImpl");
        defaultImplementations.put((captor.domainsystem.NextFormsType.class), "captor.domainsystem.impl.NextFormsTypeImpl");
        defaultImplementations.put((captor.domainsystem.ParametersType.class), "captor.domainsystem.impl.ParametersTypeImpl");
        defaultImplementations.put((captor.domainsystem.OrType.class), "captor.domainsystem.impl.OrTypeImpl");
        defaultImplementations.put((captor.domainsystem.ParameterType.class), "captor.domainsystem.impl.ParameterTypeImpl");
        defaultImplementations.put((captor.domainsystem.FormsType.class), "captor.domainsystem.impl.FormsTypeImpl");
        defaultImplementations.put((captor.domainsystem.Forms.class), "captor.domainsystem.impl.FormsImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "forms"), (captor.domainsystem.Forms.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: captor.domainsystem
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of FormComponentsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.FormComponentsType createFormComponentsType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.FormComponentsTypeImpl();
    }

    /**
     * Create an instance of FormComponentType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.FormComponentType createFormComponentType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.FormComponentTypeImpl();
    }

    /**
     * Create an instance of NextFormType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.NextFormType createNextFormType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.NextFormTypeImpl();
    }

    /**
     * Create an instance of FormType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.FormType createFormType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.FormTypeImpl();
    }

    /**
     * Create an instance of NextFormsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.NextFormsType createNextFormsType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.NextFormsTypeImpl();
    }

    /**
     * Create an instance of ParametersType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.ParametersType createParametersType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.ParametersTypeImpl();
    }

    /**
     * Create an instance of OrType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.OrType createOrType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.OrTypeImpl();
    }

    /**
     * Create an instance of ParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.ParameterType createParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.ParameterTypeImpl();
    }

    /**
     * Create an instance of FormsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.FormsType createFormsType()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.FormsTypeImpl();
    }

    /**
     * Create an instance of Forms
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public captor.domainsystem.Forms createForms()
        throws javax.xml.bind.JAXBException
    {
        return new captor.domainsystem.impl.FormsImpl();
    }

}
