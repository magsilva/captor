//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.11.07 at 11:59:56 GMT-03:00 
//


package captor.projectsystem.build.mapper.impl;

public class IfTypeImpl implements captor.projectsystem.build.mapper.IfType, com.sun.xml.bind.JAXBObject, captor.projectsystem.build.mapper.impl.runtime.UnmarshallableObject, captor.projectsystem.build.mapper.impl.runtime.XMLSerializable, captor.projectsystem.build.mapper.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _ForEach;
    protected java.lang.String _Test;
    protected com.sun.xml.bind.util.ListImpl _If;
    protected com.sun.xml.bind.util.ListImpl _CallTask;
    public final static java.lang.Class version = (captor.projectsystem.build.mapper.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (captor.projectsystem.build.mapper.IfType.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getForEach() {
        if (_ForEach == null) {
            _ForEach = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _ForEach;
    }

    public java.util.List getForEach() {
        return _getForEach();
    }

    public java.lang.String getTest() {
        return _Test;
    }

    public void setTest(java.lang.String value) {
        _Test = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getIf() {
        if (_If == null) {
            _If = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _If;
    }

    public java.util.List getIf() {
        return _getIf();
    }

    protected com.sun.xml.bind.util.ListImpl _getCallTask() {
        if (_CallTask == null) {
            _CallTask = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _CallTask;
    }

    public java.util.List getCallTask() {
        return _getCallTask();
    }

    public captor.projectsystem.build.mapper.impl.runtime.UnmarshallingEventHandler createUnmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context) {
        return new captor.projectsystem.build.mapper.impl.IfTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx3 = 0;
        final int len3 = ((_If == null)? 0 :_If.size());
        int idx4 = 0;
        final int len4 = ((_CallTask == null)? 0 :_CallTask.size());
        while (idx4 != len4) {
            context.startElement("", "callTask");
            int idx_0 = idx4;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx_0 ++)), "CallTask");
            context.endNamespaceDecls();
            int idx_1 = idx4;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx_1 ++)), "CallTask");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx4 ++)), "CallTask");
            context.endElement();
        }
        while (idx3 != len3) {
            context.startElement("", "if");
            int idx_2 = idx3;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _If.get(idx_2 ++)), "If");
            context.endNamespaceDecls();
            int idx_3 = idx3;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _If.get(idx_3 ++)), "If");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _If.get(idx3 ++)), "If");
            context.endElement();
        }
        while (idx1 != len1) {
            context.startElement("", "for-Each");
            int idx_4 = idx1;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx_4 ++)), "ForEach");
            context.endNamespaceDecls();
            int idx_5 = idx1;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx_5 ++)), "ForEach");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx1 ++)), "ForEach");
            context.endElement();
        }
    }

    public void serializeAttributes(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx3 = 0;
        final int len3 = ((_If == null)? 0 :_If.size());
        int idx4 = 0;
        final int len4 = ((_CallTask == null)? 0 :_CallTask.size());
        if (_Test!= null) {
            context.startAttribute("", "test");
            try {
                context.text(((java.lang.String) _Test), "Test");
            } catch (java.lang.Exception e) {
                captor.projectsystem.build.mapper.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx4 != len4) {
            idx4 += 1;
        }
        while (idx3 != len3) {
            idx3 += 1;
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public void serializeURIs(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx3 = 0;
        final int len3 = ((_If == null)? 0 :_If.size());
        int idx4 = 0;
        final int len4 = ((_CallTask == null)? 0 :_CallTask.size());
        while (idx4 != len4) {
            idx4 += 1;
        }
        while (idx3 != len3) {
            idx3 += 1;
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (captor.projectsystem.build.mapper.IfType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar."
+"ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMor"
+"eExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000"
+"\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000ps"
+"r\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tname"
+"Classt\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gramm"
+"ar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcont"
+"entModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\nq\u0000~"
+"\u0000\u000epsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000"
+"\u0002L\u0000\tnameClassq\u0000~\u0000\u0010xq\u0000~\u0000\u0003q\u0000~\u0000\u000epsr\u00002com.sun.msv.grammar.Expres"
+"sion$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\r\u0001psr\u0000 com.sun"
+".msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar."
+"NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$Eps"
+"ilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001bpsr\u0000#com.sun.msv.grammar"
+".SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;"
+"L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000.captor.projectsystem.build.mapp"
+"er.CallTaskTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-element"
+"ssq\u0000~\u0000\bppsq\u0000~\u0000\u0017q\u0000~\u0000\u000epsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004n"
+"amet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.d"
+"atatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd"
+".BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Co"
+"ncreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatype"
+"Impl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteS"
+"pacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 ht"
+"tp://www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.ms"
+"v.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.m"
+"sv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr"
+"\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\f"
+"namespaceURIq\u0000~\u0000\"xpq\u0000~\u00003q\u0000~\u00002sq\u0000~\u0000!t\u0000\u0004typet\u0000)http://www.w3.o"
+"rg/2001/XMLSchema-instanceq\u0000~\u0000 sq\u0000~\u0000!t\u0000\bcallTaskt\u0000\u0000q\u0000~\u0000 sq\u0000~"
+"\u0000\bppsq\u0000~\u0000\nq\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\n"
+"q\u0000~\u0000\u000epsq\u0000~\u0000\u0017q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 sq\u0000~\u0000!t\u0000(captor.projectsyst"
+"em.build.mapper.IfTypeq\u0000~\u0000%sq\u0000~\u0000\bppsq\u0000~\u0000\u0017q\u0000~\u0000\u000epq\u0000~\u0000+q\u0000~\u0000;q\u0000~"
+"\u0000 sq\u0000~\u0000!t\u0000\u0002ifq\u0000~\u0000@q\u0000~\u0000 sq\u0000~\u0000\bppsq\u0000~\u0000\nq\u0000~\u0000\u000epsq\u0000~\u0000\u000fq\u0000~\u0000\u000ep\u0000sq\u0000~"
+"\u0000\u0000ppsq\u0000~\u0000\u000fpp\u0000sq\u0000~\u0000\bppsq\u0000~\u0000\nq\u0000~\u0000\u000epsq\u0000~\u0000\u0017q\u0000~\u0000\u000epq\u0000~\u0000\u001aq\u0000~\u0000\u001eq\u0000~\u0000 "
+"sq\u0000~\u0000!t\u0000-captor.projectsystem.build.mapper.ForEachTypeq\u0000~\u0000%s"
+"q\u0000~\u0000\bppsq\u0000~\u0000\u0017q\u0000~\u0000\u000epq\u0000~\u0000+q\u0000~\u0000;q\u0000~\u0000 sq\u0000~\u0000!t\u0000\bfor-Eachq\u0000~\u0000@q\u0000~\u0000"
+" sq\u0000~\u0000\bppsq\u0000~\u0000\u0017q\u0000~\u0000\u000epsq\u0000~\u0000(ppsr\u0000#com.sun.msv.datatype.xsd.St"
+"ringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000-q\u0000~\u00002t\u0000\u0006stringsr\u00005c"
+"om.sun.msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xq\u0000~\u00005\u0001q\u0000~\u00008sq\u0000~\u00009q\u0000~\u0000bq\u0000~\u00002sq\u0000~\u0000!t\u0000\u0004testq\u0000~\u0000@q\u0000~\u0000 sr\u0000\"co"
+"m.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lco"
+"m/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.ms"
+"v.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstr"
+"eamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp"
+"\u0000\u0000\u0000\u0016\u0001pq\u0000~\u0000\u0005q\u0000~\u0000\u0013q\u0000~\u0000Dq\u0000~\u0000Rq\u0000~\u0000\fq\u0000~\u0000Bq\u0000~\u0000Pq\u0000~\u0000\tq\u0000~\u0000Aq\u0000~\u0000Oq\u0000~\u0000"
+"\u0007q\u0000~\u0000]q\u0000~\u0000\u0015q\u0000~\u0000Fq\u0000~\u0000Tq\u0000~\u0000&q\u0000~\u0000Kq\u0000~\u0000Yq\u0000~\u0000\u0016q\u0000~\u0000Gq\u0000~\u0000Uq\u0000~\u0000\u0006x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends captor.projectsystem.build.mapper.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------");
        }

        protected Unmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return captor.projectsystem.build.mapper.impl.IfTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("for-Each" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  6 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  9 :
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("for-Each" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  12 :
                        if (("for-Each" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("for-each" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname, __atts)));
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Test = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  5 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  12 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  11 :
                        if (("for-Each" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  10 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        if (("test" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  0 :
                        if (("test" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  4 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  12 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  10 :
                        if (("select" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname)));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  7 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  4 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                    case  9 :
                        state = 12;
                        continue outer;
                    case  2 :
                        if (("test" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  7 :
                            attIdx = context.getAttribute("", "test");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 8, value)));
                            return ;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  0 :
                            attIdx = context.getAttribute("", "test");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  4 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 5, value)));
                            return ;
                        case  9 :
                            state = 12;
                            continue outer;
                        case  12 :
                            revertToParentFromText(value);
                            return ;
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  10 :
                            attIdx = context.getAttribute("", "select");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 11, value)));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
