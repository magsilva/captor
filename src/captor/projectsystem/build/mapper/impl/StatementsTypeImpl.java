//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2005.10.30 at 02:15:45 GMT-03:00 
//


package captor.projectsystem.build.mapper.impl;

public class StatementsTypeImpl implements captor.projectsystem.build.mapper.MainType, com.sun.xml.bind.JAXBObject, captor.projectsystem.build.mapper.impl.runtime.UnmarshallableObject, captor.projectsystem.build.mapper.impl.runtime.XMLSerializable, captor.projectsystem.build.mapper.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _ForEach;
    protected com.sun.xml.bind.util.ListImpl _If;
    protected com.sun.xml.bind.util.ListImpl _CallTask;
    public final static java.lang.Class version = (captor.projectsystem.build.mapper.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (captor.projectsystem.build.mapper.MainType.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getForEach() {
        if (_ForEach == null) {
            _ForEach = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _ForEach;
    }

    public java.util.List getForEach() {
        return _getForEach();
    }

    protected com.sun.xml.bind.util.ListImpl _getIf() {
        if (_If == null) {
            _If = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _If;
    }

    public java.util.List getIf() {
        return _getIf();
    }

    protected com.sun.xml.bind.util.ListImpl _getCallTask() {
        if (_CallTask == null) {
            _CallTask = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _CallTask;
    }

    public java.util.List getCallTask() {
        return _getCallTask();
    }

    public captor.projectsystem.build.mapper.impl.runtime.UnmarshallingEventHandler createUnmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context) {
        return new captor.projectsystem.build.mapper.impl.StatementsTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx2 = 0;
        final int len2 = ((_If == null)? 0 :_If.size());
        int idx3 = 0;
        final int len3 = ((_CallTask == null)? 0 :_CallTask.size());
        while (idx3 != len3) {
            context.startElement("", "callTask");
            int idx_0 = idx3;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx_0 ++)), "CallTask");
            context.endNamespaceDecls();
            int idx_1 = idx3;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx_1 ++)), "CallTask");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _CallTask.get(idx3 ++)), "CallTask");
            context.endElement();
        }
        while (idx2 != len2) {
            context.startElement("", "if");
            int idx_2 = idx2;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _If.get(idx_2 ++)), "If");
            context.endNamespaceDecls();
            int idx_3 = idx2;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _If.get(idx_3 ++)), "If");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _If.get(idx2 ++)), "If");
            context.endElement();
        }
        while (idx1 != len1) {
            context.startElement("", "for-each");
            int idx_4 = idx1;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx_4 ++)), "ForEach");
            context.endNamespaceDecls();
            int idx_5 = idx1;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx_5 ++)), "ForEach");
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _ForEach.get(idx1 ++)), "ForEach");
            context.endElement();
        }
    }

    public void serializeAttributes(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx2 = 0;
        final int len2 = ((_If == null)? 0 :_If.size());
        int idx3 = 0;
        final int len3 = ((_CallTask == null)? 0 :_CallTask.size());
        while (idx3 != len3) {
            idx3 += 1;
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public void serializeURIs(captor.projectsystem.build.mapper.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_ForEach == null)? 0 :_ForEach.size());
        int idx2 = 0;
        final int len2 = ((_If == null)? 0 :_If.size());
        int idx3 = 0;
        final int len3 = ((_CallTask == null)? 0 :_CallTask.size());
        while (idx3 != len3) {
            idx3 += 1;
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (captor.projectsystem.build.mapper.MainType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000"
+"\u0002xq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.s"
+"un.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001f"
+"Lcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Eleme"
+"ntExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModel"
+"q\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\rp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\tq\u0000~\u0000\rpsr\u0000 c"
+"om.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tname"
+"Classq\u0000~\u0000\u000fxq\u0000~\u0000\u0003q\u0000~\u0000\rpsr\u00002com.sun.msv.grammar.Expression$Any"
+"StringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\f\u0001psr\u0000 com.sun.msv.gra"
+"mmar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClas"
+"s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpr"
+"ession\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001apsr\u0000#com.sun.msv.grammar.SimpleN"
+"ameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnames"
+"paceURIq\u0000~\u0000!xq\u0000~\u0000\u001ct\u0000.captor.projectsystem.build.mapper.CallT"
+"askTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0007p"
+"psq\u0000~\u0000\u0016q\u0000~\u0000\rpsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dt"
+"t\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLc"
+"om/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype."
+"xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Builtin"
+"AtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000!L\u0000\btypeNameq\u0000~\u0000!L\u0000\nwhiteSpacet\u0000.L"
+"com/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www"
+".w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.W"
+"hiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.dataty"
+"pe.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.gramm"
+"ar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.su"
+"n.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000!L\u0000\fnamespac"
+"eURIq\u0000~\u0000!xpq\u0000~\u00002q\u0000~\u00001sq\u0000~\u0000 t\u0000\u0004typet\u0000)http://www.w3.org/2001/"
+"XMLSchema-instanceq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\bcallTaskt\u0000\u0000q\u0000~\u0000\u001fsq\u0000~\u0000\u0007ppsq\u0000~"
+"\u0000\tq\u0000~\u0000\rpsq\u0000~\u0000\u000eq\u0000~\u0000\rp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u000epp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\tq\u0000~\u0000\rpsq"
+"\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000(captor.projectsystem.build"
+".mapper.IfTypeq\u0000~\u0000$sq\u0000~\u0000\u0007ppsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000*q\u0000~\u0000:q\u0000~\u0000\u001fsq\u0000~\u0000 "
+"t\u0000\u0002ifq\u0000~\u0000?q\u0000~\u0000\u001fsq\u0000~\u0000\u0007ppsq\u0000~\u0000\tq\u0000~\u0000\rpsq\u0000~\u0000\u000eq\u0000~\u0000\rp\u0000sq\u0000~\u0000\u0000ppsq\u0000~"
+"\u0000\u000epp\u0000sq\u0000~\u0000\u0007ppsq\u0000~\u0000\tq\u0000~\u0000\rpsq\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000\u0019q\u0000~\u0000\u001dq\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000"
+"-captor.projectsystem.build.mapper.ForEachTypeq\u0000~\u0000$sq\u0000~\u0000\u0007pps"
+"q\u0000~\u0000\u0016q\u0000~\u0000\rpq\u0000~\u0000*q\u0000~\u0000:q\u0000~\u0000\u001fsq\u0000~\u0000 t\u0000\bfor-eachq\u0000~\u0000?q\u0000~\u0000\u001fsr\u0000\"com"
+".sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom"
+"/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv"
+".grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstre"
+"amVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000"
+"\u0000\u0000\u0014\u0001pq\u0000~\u0000\u0012q\u0000~\u0000Cq\u0000~\u0000Qq\u0000~\u0000\u000bq\u0000~\u0000Aq\u0000~\u0000Oq\u0000~\u0000\bq\u0000~\u0000@q\u0000~\u0000Nq\u0000~\u0000\u0006q\u0000~\u0000\u0014"
+"q\u0000~\u0000Eq\u0000~\u0000Sq\u0000~\u0000%q\u0000~\u0000Jq\u0000~\u0000Xq\u0000~\u0000\u0015q\u0000~\u0000Fq\u0000~\u0000Tq\u0000~\u0000\u0005x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends captor.projectsystem.build.mapper.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context) {
            super(context, "----------");
        }

        protected Unmarshaller(captor.projectsystem.build.mapper.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return captor.projectsystem.build.mapper.impl.StatementsTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        if (("for-each" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  3 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  7 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("for-each" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  0 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        if (("for-each" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  4 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("if" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("for-Each" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname, __atts)));
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        state = 9;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  2 :
                        if (("callTask" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 3;
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, ___uri, ___local, ___qname)));
                        return ;
                    case  5 :
                        if (("if" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  9 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  8 :
                        if (("for-each" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  4 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromLeaveElement((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        state = 9;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  7 :
                        if (("select" == ___local)&&("" == ___uri)) {
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        if (("id" == ___local)&&("" == ___uri)) {
                            _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, ___uri, ___local, ___qname)));
                        return ;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  9 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        if (("test" == ___local)&&("" == ___uri)) {
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromEnterAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        state = 9;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  7 :
                        attIdx = context.getAttribute("", "select");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, ___uri, ___local, ___qname)));
                        return ;
                    case  1 :
                        attIdx = context.getAttribute("", "id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, ___uri, ___local, ___qname)));
                        return ;
                    case  0 :
                        state = 3;
                        continue outer;
                    case  9 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  4 :
                        attIdx = context.getAttribute("", "test");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromLeaveAttribute((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, ___uri, ___local, ___qname)));
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            state = 9;
                            continue outer;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  7 :
                            attIdx = context.getAttribute("", "select");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getForEach().add(((captor.projectsystem.build.mapper.impl.ForEachTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.ForEachTypeImpl.class), 8, value)));
                            return ;
                        case  1 :
                            attIdx = context.getAttribute("", "id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getCallTask().add(((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.CallTaskTypeImpl.class), 2, value)));
                            return ;
                        case  0 :
                            state = 3;
                            continue outer;
                        case  9 :
                            revertToParentFromText(value);
                            return ;
                        case  4 :
                            attIdx = context.getAttribute("", "test");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getIf().add(((captor.projectsystem.build.mapper.impl.IfTypeImpl) spawnChildFromText((captor.projectsystem.build.mapper.impl.IfTypeImpl.class), 5, value)));
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
